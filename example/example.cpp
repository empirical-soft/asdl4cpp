#include <iostream>
#include <string>

// generated by ASDL
#include <Arithmetic.h>

using namespace Arithmetic;

class EvalVisitor : public BaseVisitor {
 public:
 
  std::any visitBinOp(BinOp_t node) override {
    int left = std::any_cast<int>(visit(node->left));
    int right = std::any_cast<int>(visit(node->right));
    switch (node->op) {
        case operator_t::kAdd: return left + right;
        case operator_t::kSub: return left - right;
        case operator_t::kMul: return left * right;
        case operator_t::kDiv: return left / right;
    }
  }
  
  std::any visitNum(Num_t node) override {
    return node->n;
  }

  std::any visitOperator(operator_t value) override {
    // not reached
    return 0;
  }
};

int main() {
  //1+2*3
  expr_t e = BinOp(
                   Num(1),
                   operator_t::kAdd,
                   BinOp(
                         Num(2),
                         operator_t::kMul,
                         Num(3)
                        )
                  );

  // print expression
  std::cout << to_string(e) << std::endl;

  // evaluate expression
  EvalVisitor eval_visitor;
  int result = std::any_cast<int>(eval_visitor.visit(e));
  std::cout << "result is " << result << std::endl;

  return 0;
}

